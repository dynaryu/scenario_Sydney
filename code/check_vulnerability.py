import os
import shutil
import tempfile
import unittest

from scipy import array, allclose, interp
import numpy as np

from eqrm_code.vulnerability_model import *

class Dummy:
    def __init__(self):
        pass

class Test_Vulnerability_Set(unittest.TestCase):

    def setUp(self):
        self.site_tag = "sydney_soil"
        self.input_dir = '/Users/hyeuk/Projects/scenario_Sydney/input'

        #f = open(os.path.join(self.input_dir,
        #                      '%s_vulnerability.xml' % self.site_tag), 'wb')
        #f.write(self.raw_xml)
        #f.close()

        #self.msg = 'Expected %s, got %s'

    def tearDown(self):
        shutil.rmtree(self.input_dir)

    def from_xml(self):
        eqrm_flags = Dummy()
        eqrm_flags.site_tag = self.site_tag
        eqrm_flags.input_dir = self.input_dir
        eqrm_flags.vulnerability_variability_method = None
        return Vulnerability_Set.from_xml(eqrm_flags)

    def test_from_xml(self):
        vulnerability_set = self.from_xml()
        self.assertEqual(vulnerability_set.intensity_measure_type, 'MMI')

        expected_iml = np.arange(2.0, 10.05, 0.05)
        self.assertTrue(allclose(expected_iml,
                                 vulnerability_set.intensity_measure_level),
                        self.msg % (expected_iml,
                                    vulnerability_set.intensity_measure_level))

        Timber_Post1945 = vulnerability_set.vulnerability_functions['Timber_Post1945']
        expected_Timber_Post1945_lossratio = array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.000119786752714, 0.000239573505428, 0.000359360258142, 0.000479147010856, 0.00059893376357, 0.000718720516284, 0.000838507268998, 0.000958294021712, 0.00107808077443, 0.00119786752714, 0.00131765427985, 0.00143744103257, 0.00155722778528, 0.001677014538, 0.00179680129071, 0.00191658804342, 0.00203637479614, 0.00215616154885, 0.00227594830157, 0.00239573505428, 0.00251552180699, 0.00263530855971, 0.00275509531242, 0.00287488206514, 0.00299466881785, 0.00311445557056, 0.00323424232328, 0.00335402907599, 0.00347381582871, 0.00359360258142, 0.00385508380158, 0.00413551220696, 0.00443624882805, 0.00475875066953, 0.00510457720761, 0.00547539728623, 0.00587299643007, 0.00629928459235, 0.00675630435473, 0.00724623959583, 0.00777142464407, 0.00833435392865, 0.00893769214094, 0.00958428491588, 0.01027717004, 0.0110195891891, 0.0118150001932, 0.0126670898229, 0.0135797870824, 0.0145572769874, 0.0156040147995, 0.0167247406741, 0.01792449467, 0.0192086320533, 0.0205828388127, 0.0220531472852, 0.02362595177, 0.025308023986, 0.0271065282014, 0.0290290358363, 0.031083539306, 0.0332784648375, 0.0356226839561, 0.0381255232933, 0.0407967723279, 0.0436466886211, 0.0466860000604, 0.0499259035752, 0.053378059736, 0.0570545825989, 0.0609680241067, 0.0651313523149, 0.0695579226693, 0.0742614415317, 0.0792559211297, 0.0845556251012, 0.0901750038179, 0.0961286187048, 0.102431054838, 0.109096821196, 0.11614023806, 0.123575311257, 0.131415593099, 0.139674030203, 0.148362798622, 0.157493127111, 0.167075109757, 0.177117509619, 0.187627555558, 0.198610734885, 0.210070585013, 0.222008487778, 0.234423470592, 0.247312018968, 0.260667905347, 0.274482039323, 0.288742344479, 0.303433666962, 0.318537720644, 0.334033073248, 0.349895177159, 0.366096447738, 0.382606390892, 0.399391780449, 0.416416884483, 0.433643738379, 0.451032460934, 0.468541608444, 0.486128560442, 0.503749929689, 0.521361988129, 0.538921100005, 0.556384153032, 0.573708978607, 0.590854752455, 0.607782367735, 0.624454773677, 0.640837273903, 0.656897779972, 0.672607017068])
        self.assertTrue(allclose(expected_Timber_Post1945_lossratio,
                                 Timber_Post1945.mean_loss_ratio),
                        self.msg % (expected_Timber_Post1945_lossratio,
                                    Timber_Post1945.mean_loss_ratio))
        expected_w1timbermetal_cv = np.zeros_like(expected_iml)
        self.assertTrue(allclose(expected_w1timbermetal_cv,
                                 w1timbermetal.coefficient_of_variation),
                        self.msg % (expected_w1timbermetal_cv,
                                    w1timbermetal.coefficient_of_variation))

        # w1bvmetal = vulnerability_set.vulnerability_functions['W1BVMETAL']
        # expected_w1bvmetal_lossratio = array([0.00, 0.04, 0.15, 0.25, 0.34,
        #                                       0.42, 0.49, 0.55, 0.60, 0.64,
        #                                       0.67, 0.71, 0.73, 0.76, 0.78,
        #                                       0.80, 0.81, 0.83, 0.84, 0.85,
        #                                       0.87, 0.87, 0.88, 0.89, 0.90,
        #                                       0.91, 0.91, 0.92, 0.92, 0.93,
        #                                       0.93, 0.94, 0.94, 0.94, 0.95,
        #                                       0.95, 0.95, 0.95, 0.96, 0.96,
        #                                       1.00])
        # self.assertTrue(allclose(expected_w1bvmetal_lossratio,
        #                          w1bvmetal.mean_loss_ratio),
        #                 self.msg % (expected_w1bvmetal_lossratio,
        #                             w1bvmetal.mean_loss_ratio))
        # expected_w1bvmetal_cv = array([0.30, 0.30, 0.30, 0.30, 0.30, 0.30,
        #                                0.30, 0.30, 0.30, 0.30, 0.30, 0.30,
        #                                0.30, 0.30, 0.30, 0.30, 0.30, 0.30,
        #                                0.30, 0.30, 0.30, 0.30, 0.30, 0.30,
        #                                0.30, 0.30, 0.30, 0.30, 0.30, 0.30,
        #                                0.30, 0.30, 0.30, 0.30, 0.30, 0.30,
        #                                0.30, 0.30, 0.30, 0.30, 0.30])
        # self.assertTrue(allclose(expected_w1bvmetal_cv,
        #                          w1bvmetal.coefficient_of_variation),
        #                 self.msg % (expected_w1bvmetal_cv,
        #                             w1bvmetal.coefficient_of_variation))


    def test_calc_mean(self):
        vulnerability_set = self.from_xml()

        intensity_level = 9

        expected_w1timbermetal_mean = interp(intensity_level,
                                             [8.95, 9.05],
                                             [0.349895177159, 0.349895177159])
        expected_w1timbermetal_sigma = expected_w1timbermetal_mean * 0.0
        (w1timbermetal_mean,
         w1timbermetal_sigma) = vulnerability_set.calc_mean('Timber_Post1945',
                                                            intensity_level)
        self.assertEqual(expected_w1timbermetal_mean,
                         w1timbermetal_mean,
                         self.msg % (expected_w1timbermetal_mean,
                                     w1timbermetal_mean))
        self.assertEqual(expected_w1timbermetal_sigma,
                         w1timbermetal_sigma,
                         self.msg % (expected_w1timbermetal_sigma,
                                     w1timbermetal_sigma))

        # expected_w1bvmetal_mean = interp(intensity_level,
        #                                  [8.99, 9.05],
        #                                  [0.84, 0.85])
        # expected_w1bvmetal_sigma = expected_w1bvmetal_mean * 0.3
        # (w1bvmetal_mean,
        #  w1bvmetal_sigma) = vulnerability_set.calc_mean('W1BVMETAL',
        #                                                 intensity_level)
        # self.assertEqual(expected_w1bvmetal_mean,
        #                  w1bvmetal_mean,
        #                  self.msg % (expected_w1bvmetal_mean,
        #                              w1bvmetal_mean))
        # self.assertEqual(expected_w1bvmetal_sigma,
        #                  w1bvmetal_sigma,
        #                  self.msg % (expected_w1bvmetal_sigma,
        #                              w1bvmetal_sigma))

    def test_sample(self):
        vulnerability_set = self.from_xml()

        intensity_levels = array([8, 9])

        (mean,
         sigma) = vulnerability_set.calc_mean('W1BVMETAL', intensity_levels)

        sample_values = vulnerability_set.sample('W1BVMETAL', mean, sigma)
        expected_sample_values = mean + 2 * sigma
        self.assertTrue(allclose(sample_values, expected_sample_values),
                        self.msg % (expected_sample_values, sample_values))

    def test_ratio_cutoff(self):
        vulnerability_set = self.from_xml()

        sample_values = array([-1, -0.5, 0.0, 0.5, 1.0, 1.5])

        expected_cutoff_values = array([0.0, 0.0, 0.0, 0.5, 1.0, 1.0])
        cutoff_values = vulnerability_set.ratio_cutoff(sample_values)

        self.assertTrue(allclose(cutoff_values, expected_cutoff_values),
                        self.msg % (expected_cutoff_values, cutoff_values))


#-------------------------------------------------------------
if __name__ == "__main__":
    suite = unittest.makeSuite(Test_Vulnerability_Set,'test')
    runner = unittest.TextTestRunner()
    runner.run(suite)
